name: Pipeline Laboratorio Final DevSecOps
on:
  push:
    branches:
      - feature-labfinal  # El pipeline se ejecuta en la rama 'feature-labfinal'

jobs:
  SAST:
    runs-on: ubuntu-24.04  # Se ejecuta en Ubuntu 24.04

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3  # Obtiene el código fuente

      - name: Install Node.js
        uses: actions/setup-node@v3  # Configura Node.js en versión 18

      - name: Set Environment Variables
        run: |
          echo "BRANCH_NAME=${{ github.ref_name }}" >> $GITHUB_ENV  # Establece el nombre de la rama
          echo "ORG_NAME=rmedina-cursodevsecopsusach" >> $GITHUB_ENV  # Establece la organización en SonarCloud

      - name: Validando existencia de proyecto en SonarCloud
        id: validateProjectOnSonar
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}  # Token de autenticación
          REPO_NAME: ${{ github.event.repository.name }}  # Nombre del repositorio
        run: |
          # Verifica si el proyecto existe en SonarCloud y lo crea si no es así
          ...

      - name: Quality Gate
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}  # Token de SonarCloud
          REPO_NAME: ${{ github.event.repository.name }}  # Nombre del repositorio
        run: |
          # Verifica el estado del Quality Gate y si no es OK, busca vulnerabilidades críticas
          # Si se encuentran vulnerabilidades críticas, el pipeline falla
          vulnerabilities=$(curl -s -u "$SONAR_TOKEN:" \
            "https://sonarcloud.io/api/issues/search?componentKeys=$REPO_NAME&types=VULNERABILITY&severities=CRITICAL,BLOCKER" | jq -r '.total')

          if [ "$vulnerabilities" -gt 0 ]; then
            echo "Se encontraron $vulnerabilities vulnerabilidades críticas. El proyecto no cumple con los estándares de seguridad."
            exit 1  # Fallo si hay vulnerabilidades críticas
          fi

  SCA:
      needs: SAST  # Depende del análisis SAST
      runs-on: ubuntu-24.04  # Se ejecuta en Ubuntu 24.04

      steps:
        - name: Checkout Code
          uses: actions/checkout@v3  # Obtiene el código fuente

        - name: Install Dependencies
          run: npm install  # Instala las dependencias del proyecto

        - name: Dependency Check
          uses: dependency-check/Dependency-Check_Action@1.1.0
          id: depcheck
          with:
            project: '${{ github.event.repository.name }}'  # Nombre del proyecto
            path: '.'  # Directorio del proyecto
            format: 'HTML'  # Formato del reporte
            args: >
              --out ./reports  # Directorio de salida
              --failOnCVSS 5  # Fallo si CVSS > 5 (vulnerabilidades críticas)
              --enableRetired  # Considera dependencias retiradas

        - name: Upload Dependency Check Report
          uses: actions/upload-artifact@v3
          with:
            name: Dependency Check Report
            path: ./reports  # Sube el reporte de vulnerabilidades

  DockerBuild:
      needs: SCA  # Depende del análisis SCA
      runs-on: ubuntu-24.04  # Se ejecuta en Ubuntu 24.04
      steps:
        - name: Checkout code
          uses: actions/checkout@v2  # Obtiene el código fuente

        - name: Docker Login
          uses: docker/login-action@v3.0.0
          with:
            username: ${{ secrets.DOCKER_USER }}  # Usuario de Docker
            password: ${{ secrets.DOCKER_PASSWORD }}  # Contraseña de Docker
        
        - name: Docker Build
          run: |
            docker build --tag rmedinam91/laboratorio-final-devsecops:latest .  # Construye la imagen Docker

        - name: Push Docker
          run: |
            docker push rmedinam91/laboratorio-final-devsecops:latest  # Sube la imagen Docker

  DockerScan:
    needs: DockerBuild  # Depende de DockerBuild
    runs-on: ubuntu-24.04  # Se ejecuta en Ubuntu 24.04
    steps:
      - name: Docker Login
        uses: docker/login-action@v3.0.0
        with:
          username: ${{ secrets.DOCKER_USER }}  # Usuario de Docker
          password: ${{ secrets.DOCKER_PASSWORD }}  # Contraseña de Docker

      - name: Pull Docker
        run: |
          docker pull b4b4y4g4x/cursodevsecops-test:latest  # Descarga la imagen Docker

      - name: Run Trivy Scan
        uses: aquasecurity/trivy-action@master  # Escanea la imagen Docker en busca de vulnerabilidades
        with:
          image-ref: 'b4b4y4g4x/cursodevsecops-test:latest'  # Imagen Docker a escanear
          format: 'table'  # Formato del reporte
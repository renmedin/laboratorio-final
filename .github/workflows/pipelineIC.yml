name: Pipeline Laboratorio Final DevSecOps
on:
  push:
    branches:
      - feature-labfinal # El pipeline se ejecuta en la rama 'feature-labfinal'

jobs:
  SAST:
    runs-on: ubuntu-24.04 # Se ejecuta en Ubuntu 24.04

    steps:
      - name: Checkout Code # Se clona el repositorio
        uses: actions/checkout@v3
      
      - name: Install Node.js
        uses: actions/setup-node@v3 # Configura Node.js en versión 18
        with:
          node-version: '18'
      
      - name: Set Environment Variables
        run: |
          echo "BRANCH_NAME=${{ github.ref_name }}" >> $GITHUB_ENV   # Establece el nombre de la rama
          echo "ORG_NAME=rmedina-cursodevsecopsusach" >> $GITHUB_ENV  # Establece la organización en SonarCloud


      - name: Variable  # Muestra el nombre de la rama
        run: echo "$BRANCH_NAME"


      - name: Validando existencia de proyecto en SonarCloud  # Verifica si el proyecto existe en SonarCloud y lo crea si no es así
        id: validateProjectOnSonar
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}  # Token de autenticación
          REPO_NAME: ${{ github.event.repository.name }}  # Nombre del repositorio
        run: |
          echo ${{ github.event.repository.name }}
          echo "Verificando si el proyecto $REPO_NAME existe en SonarCloud..."
          response=$(curl -s -o /dev/null -w "%{http_code}" -u "$SONAR_TOKEN:" \
           "https://sonarcloud.io/api/projects/search?projects=$REPO_NAME")
          echo "$response"  

          if [ "$response" -ne 200 ]; then
            echo "El proyecto no existe. Creándolo en SonarCloud..."
            create_response=$(curl -s -w "%{http_code}" -o /dev/null -X POST -u "$SONAR_TOKEN:" \
              "https://sonarcloud.io/api/projects/create" \
              -d "name=$REPO_NAME" \
              -d "project=$REPO_NAME" \
              -d "organization=$ORG_NAME" \
              -d "visibility=public")
            if [ "$create_response" -ne 201 ]; then
              echo "Proyecto creado exitosamente (HTTP Response: $create_response)."
            fi

            echo "Estableciendo la rama [$BRANCH_NAME] como predeterminada..."
            curl -s -f -X POST -u "$SONAR_TOKEN:" \
              "https://sonarcloud.io/api/project_branches/rename" \
              -d "name=$BRANCH_NAME" \
              -d "project=$REPO_NAME"

            echo "project_created=true" >> $GITHUB_ENV
          else
            echo "El proyecto ya existe en SonarCloud."
            echo "project_created=false" >> $GITHUB_ENV
          fi

      - name: Quality Gate  # Si se encuentran vulnerabilidades críticas, el pipeline falla
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN}}
          REPO_NAME: ${{ github.event.repository.name }}
        run: |
          echo "Validando estado del Quality Gate"
          analysisId=$(curl -s -u "$SONAR_TOKEN:" \
            "https://sonarcloud.io/api/ce/component?component=$REPO_NAME" | jq -r '.current.analysisId')

          qualityGateStatus=$(curl -s -u "$SONAR_TOKEN:" \
            "https://sonarcloud.io/api/qualitygates/project_status?analysisId=$analysisId" | jq -r '.projectStatus.status')

          if [ "$qualityGateStatus" != "OK" ]; then
            echo "El proyecto no cumple con el Quality Gate: $qualityGateStatus."
            echo "Verificando vulnerabilidades críticas..."
            vulnerabilities=$(curl -s -u "$SONAR_TOKEN:" \
              "https://sonarcloud.io/api/issues/search?componentKeys=$REPO_NAME&types=VULNERABILITY&severity=CRITICAL&severity=HIGH&severity=MEDIUM" | jq -r '.total')

            if [ "$vulnerabilities" -gt 0 ]; then
              echo "Se encontraron $vulnerabilities vulnerabilidades. El proyecto no cumple con los estándares de seguridad."
              exit 1
            else
              echo "No se encontraron vulnerabilidades ($vulnerabilities vulnerabilidades) . El proyecto cumple con el Quality Gate." 
            fi
          fi

  SCA:
      needs: SAST  # Depende del análisis SAST
      runs-on: ubuntu-24.04

      steps:
        - name: Checkout Code
          uses: actions/checkout@v4

        - name: Instalar Dependencias  # Instala las dependencias del proyecto
          run: npm install

        - name: Chequear Dependencias
          uses: dependency-check/Dependency-Check_Action@1.1.0
          id: depcheck
          with:
            project: '${{ github.event.repository.name }}'
            path: '.'
            format: 'HTML'
            args: >
              --out ./reports
              --failOnCVSS 5
              --enableRetired

        - name: Upload Dependency Check Report
          uses: actions/upload-artifact@v4
          with:
            name: Dependency Check Report
            path: ./reports  # Sube el reporte de vulnerabilidades



  Docker-Build:  #Construcción de la imagen Docker
      needs: SCA  # Depende del análisis SCA
      runs-on: ubuntu-24.04
      steps:
      
      - name: Checkout code  # Obtiene el código fuente
        uses: actions/checkout@v4
        
      - name: Docker Login
        uses: docker/login-action@v3.0.0
        with:
          username: ${{ secrets.DOCKER_USER }}  # Usuario de Docker
          password: ${{ secrets.DOCKER_PASSWORD }}  # Contraseña de Docker
      
      - name: Download Repositorio Docker  
        uses: actions/download-artifact@master
        with:
          name: BUILD DOCKER
          path: ${{github.workspace}}

      - name: Docker Build
        run: |
          ls -R
          docker build --tag rmedinam91/laboratorio-final-devsecops:latest .

      - name: Push Docker
        run: |
          docker push rmedinam91/laboratorio-final-devsecops:latest

  image_security:
    needs: Docker-Build
    runs-on: ubuntu-24.04
    steps:
      - name: Download Trivy # Análisis de seguridad de la imagen Docker con el uso de  Trivy
        run: |
          curl -sSL https://github.com/aquasecurity/trivy/releases/download/v0.34.0/trivy_0.34.0_Linux-64bit.tar.gz -o trivy.tar.gz
          tar -zxvf trivy.tar.gz -C /usr/local/bin/

      - name: Run Trivy Scan
        run: |
          trivy image rmedinam91/laboratorio-final-devsecops:${{ github.sha }}
          